#include<stdio.h>
#include<conio.h>

#define NULL 0
struct bstnode
{
  struct bstnode *lchild ;
  int data ;
  struct bstnode *rchild ;
};

struct bstnode *root=0;

void insert(int x) ;

void insert(int x)
{
    struct bstnode *p,*t ;
    int done ;
    p = (struct bstnode *)malloc(sizeof(struct bstnode));
    p->data = x ;
    p->lchild = NULL ;
    p->rchild = NULL ;
    if(root == NULL)
    {
      root = p ;
    }
    else
    {
      t = root ;
      done = 0 ;
      while(done == 0)
      {
       if( x < t->data)
       {
	if(t->lchild==NULL)
	{
	  t->lchild = p ;
	  done = 1;
	}
	else
	  t=t->lchild ;
	}

       else
	{
	 if(t->rchild==NULL)
	 {
	    t->rchild=p;
	    done=1;
	 }
	 else
	   t=t->rchild ;
	 }
	} /*end while */
      } /*end if else */
} /*BST */

/*
1. Start from the root.
2. Compare the searching element with root, if less than root, then recurse for left, else recurse for right.
3. If the element to search is found anywhere, return true, else return false.
*/

int search(struct bstnode *nroot, int x)
{
    if(nroot==NULL )
	return 0; /* nroot is zero means element not found */
    if( nroot->data==x) /*if nroot->data is x then the element is found */
		 return 1;
    else if(x>nroot->data) /* x is greater, so we will search the right subtree */
	return search(nroot->rchild, x);
    else /*x is smaller than the data, so we will search the left subtree */
	return search(nroot->lchild, x);
}

void main()
{
  int result;
  insert(10);
  insert(20);
  insert(100);
  insert(60);
  insert(40);
  insert(30);
  insert(90);

result = search(root, 90) ;
if(result==1) printf("Element Found");
else
printf("Element Not Found");
result=search(root, 50) ;
if(result==1) printf("Element Found");
else
printf("Element Not Found");

}

